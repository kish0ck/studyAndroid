2024/09/09 ~
Part 1. 개발에 들어가기 앞서
CH 01. 개발을 시작하기 위한 기초 지식
01. 개발자 직군 소개 (2024/09/09)

개발자 -> 컴퓨터를 일하게 만드는 직업

## 개발자 직군 소개( 앱 개발자 기준)

# 앱이 만들어지는 과정 (프로덕트 매니징) -> 워터폴 방식, 에자일 방식
1. 기획
2. 디자인
3. 개발
4. 검수
5. 배포

# 앱 개발의 종류
1. 서버, 백앤드 -> 데이터를 담당
2. 클라이언트, 프론트, 프론트앤드 -> 화면을 담당


02. 개발자가 가져야할 마음가짐 (2024/09/09)
1. 배우는게 일인 직업
2. 안되는 것에 익숙해야 한다

stackoverflow -> 네이버 지식인 같은 사이트(잘못된 정보가 있을 수 있다)
-how to build android?
- 처음으로 나오는 사이트 android 공식 사이트 아니면 stackoverflow

공식 문서 -> 오피셜 doc (document)



03. 완강을 위한 커리큘럼 소개 (2024/09/09)
커리큘럼 소개

1.개발을 시작하기 위한 기초 지식
- 전부를 이해할 필요는 없다
- 개발자라면 대충이라도 들어는 봐야할 내용

2. 안드로이드 개발 언어 코틀린편
- 코틀린 언어 학습
- 복습을 하셔도 좋고, 외부 자료를 찾으셔도 좋습니다 -> 이해를 반드시 하고 넘어가야함

3-1. 안드로이드 UI 완전 정복 -> 화면을 그리는 방법
3-2. 안드로이드 (첫 안드로이드 앱 만들기) -> 안드로이드 핵심 기능 + 핵심 개념
-> 안드로이드에 대한 충분한 학습

4. 프로젝트 (실전 앱 만들기)
-> 실무 환경과 가장 비슷한 앱 개발 프로세스 경험
-> 실제로 디자이너 분들이 어떻게 시안을 전달해 주는지

5. 앱 개발자가 되기 위한 추가 학습
- 앞으로 학습하면 좋은 것들
- 앞으로의 학습 계획









04. 개발 용어 정리 1편 (2024/09/09)
 - 개발 언어
   1. C언어 (많은 언어들의 기초가 되는 언어) 파이썬 내부적으로 C언어로 동작
   2. 안드로이드 -> 자바, 코틀린, C++
   3. iOS -> Swift, Object C
   4. 서버 -> 파이썬, 자바스크립트, GO, 자바/코틀린, 등
   언어(코틀린)를 선택 -> 프레임워크(안드로이드 스튜디오) 선택 -> 개발

 - 소스 코드
   1. 코드
   2. Github, Gitlab -> 온라인 저장소, 변경점을 볼 수 있다.
   3. Git -> 변경점을 볼 수 있다, 버전관리 가능

 - 클라이언트, 프론트앤드
   1. GUI (Graphic User Interface) Interface -> 소통창구
   2. 안드로이드
   3. iOS
   4. Web
   5. TV

 - 서버, 백앤드
   1. AWS (실제로 물리적인 리소스 가지고 있고, 이 리소스를 임대 해준다) 클라우딩 서비스
   2. Azure
   3. API (Application Programming Interface)
      https://www.site.com/user/info/ -> 의사소통 창구
	  - URL /= API는 아니다


05. 개발 용어 정리 2편

 - 데이터 2024/09/09
   1. 데이터베이스
   2. MySQL, PostgreSQL, Oracle
   3. SQL (데이터베이스에 질의 하기위한 언어)

 - 운영체제(OS, Operation System) -> 가장 밑단에 있는 프로그램 -> 하드웨어를 작동시키는 프로그램
   1. Linux, 우분투, 레드 헷
   2. 안드로이드,
   3. iOS,
   4. 윈도우
   5. MacOS
   보통 하나의 프로그램은 하나의 OS와 의사소통할수 있게 만들어 진다.
   -> 이런 이유로 하나의 앱만 개발해서 안드로이드, iOS에서 모두 동작하게 만드는 것이 어렵다.


06. 수강 중 생길 수 있는 문제에 대처하는 방법

1. 코드가 동작 하지 않는다.
   - 오히려 좋을 수도 있다.
      - 디버깅을 해보자 !
	  - 사실 디버깅은 개발자의 일상입니다.
   - 디버깅을 실패 했을 경우
      - Github에서 강사가 작성한 코드와 비교
	  - https://github.com/changja88/FastCampus_2021
	  - 최후의 방법
	    - 프로젝트를 새로 만들어서 옮긴다.

2. Deprecated (더이상 지원하지 않는 기능 또는 함수)
   - 일방적으로 삭제하는 일은 거의 없기때문에 대체해서 사용할 수 있는 함수를 사용

3. 기타 오류 검색
   - 구글에 검색, 녹생창 검색 X
   - stackoverflow (개발자들의 지식인)

4. 강의를 들은 후에도 이해가 가지 않는 경우
   - 강의 복습
   - 외부 자료 참고
     - 기본 개념은 -> 한글 검색
	 - 어려운 개념은 -> 영어로 검색

5. 단축키
   - 맥을 사용하고 있기 때문에 맥 기준으로 단축키를 설명..
   - https://developer.android.com/studio?hl=ko
      - 위 사이트에서 윈도우용 단축키 검색 가능





프로그래밍 언어란 (2024/09/09)
1. 프로그래밍 언어란 컴퓨터와 의사소통 하기 위한 규칙(문법)
- 컴퓨터
   - 하드웨어 (CPU, 램, 그래픽카드, SSD)
   - 소프트웨어
- 보통 일방적인 의사 소통 (사용자 -> 컴퓨터)
- 하지만 컴퓨터도 사용자에 말을 한다.

2. 프로그래밍 언어으 ㅣ종류
- 기계어
   - 1001 0001 -> 누산기 0001 위치의 값을 저장해라
   - 사람이 거의 이해할 수 없는 언어
- 어셈블리어
   - LOAD Y -> 누산기에 Y의 값을 저장해라
   - 사람이 거의 이해할 수 없는 언어들의
- 고급언어 (우리가 사용할 언어)
   - 파이썬, 자바, 스위프트, 자바스크립트, 고, 오브젝트, 코틀린
   - 사람이 이해할 수 있는 언어

3. 고급 언어의 종류 (패러다임_
- 절차지향 언어
  - 위에서부터 아래로 순서대로 실행한다.
  - abc -> 가장 먼저 작동
  - def -> 두번째로 작동
- 객체지향 언어 (우리가 사용할 언어 - 코틀린 )
  - 객체라는 것을 만들어서 문제(이루고자 하는바)를 해결한다.
  - 코틀린, 자바 (이 둘은 굉장히 유사하다)
- 함수형 언어 (루비, 코틀린도 가능)
  - 함수라는 것을 통해서 문제를 해결한다.

4. 어떤 언어가 가장 좋은 언어 일까? (2024/09/09)
- 한글의 경우 다른 문자에 비해서 좋은 문자라고 말할 수 있지만, 프로그래밍에서 가장 좋은 언어는 없다.
- 프로그래밍 언어는 보통 목적을 가지고 탄생하였기 때문에, 목적마다 가장 좋은 언어가 다르다.
- 프로그래밍 언어는 사용자의 기호에 따라서도 충분히 선호도가 다를수 있다.

5. 어떤 언어를 먼저 배우는 것이 좋을까?
- 어떤 언어를 먼저 배워야 하는지는 중요하지 않다.
- 언어가 가지고 있는 패러다임을 공부하는것이 더 중요하다.

6. 언어의 선택
- 개발하려는 종류에 따라서 언어의 선택이 강제되는 경우가 많다.
  - 안드로이드 -> 코틀린, 자바, C++
  - iOS -> object C, swift

7. 기타
- 프로그래밍 언어는 중국어, 한국어, 영어와 같이 사람이 사용하는 언어와는 다르다.
  - 프로그래밍 언어도 개발을 하는데 있어서 도구일 뿐이지 한번 배워서 평생사용하는 기술이 아니다.
  - 내가 잘 하는 언어가 섡택의 기준이 되어서는 안된다.

코틀린이란? (2024/09/09)
- 자바 플랫폼에서 돌아가는 프로그래밍 언어이다.
  - 자바가 사용중 곳이라면 거의 대부분 코틀린 사용할 수 있다.
  - 성능도 자바와 비슷한 수준
  - 자바
    - JVM (Java Virtual Machine) 을 돌리는 언어이다.

- 함수형 프로그래밍, 객체지향 프로그래밍
  - 두 패러다임 모두 지원

- 실용성
  - 연구를 위한 언어가 아니다.
  - 다른 언어들이 채택한 이미 성공적으로 검증된 기능을 추가했다.

- 간결성
  - 자바에 비해서 코드가 간결하다
    -> 내용을 파악하기 쉽다 -> 유지 보수가 쉽다
  - 의미가 없는 부분을 줄였다
    -> 언어가 요구하는 구조를 만족하기 위한 부분들을 삭제 했다.

- 안정성
  - NullSefety 언어
  -> Null로 부터 안전하다

05. 변수 - 이론 1편

06. 변수 - 이론 2편

변수
- 변경 가능한 변수
    - var (variable, 변수)
- 변경이 불가능한 변수
    - val (value, 값)

선언하는 방법
val/var 이름
- val school
- var school
- 변수 이름 작명 = 네이밍

할당하는 방법
val/var 이름 = 값
- school = "대한민국 학교"
- val/var school = "대한민국 학교" -> 선언과 할당을 동시에 하는 방법

암묵적인 규칙
val 을 선언 할 때는 대문자로 선언
val SCHOOL = "대한민국 학교"
var 을 선언 할 때는 소문자로 선언
var phoneNumber = "010-1111-1111"

코딩 컨벤션
https://kotlinlang.org/docs/coding-conventions.html#interface-implementation-layout

두개의 단어를 합쳐서 네이밍을 할때
    카멜케이스 스타일
    - 낙타
    - 대소문자를 반복
    - phoneNumber
    스네이크 스타일
    - _
    - phone_number

val PHONE_NUMBER = "010-1111-1111"

자동정렬하는 방법
- 단축키로 사용하자!


변수 네이밍이 중요한 이유
- 가독성을 향상시키는 가장 좋은 방법
    - 코드가 길어질수록 변수의 이름을 보거 어떤 것인지 파악하는 일이 많기 때문

var abc = (수학+영어+국어)/3
abc
abc
abc = 70
abc
---> 500라인

var test_average = (수학+영어+국어)/3
test_average
test_average
test_average = 70
test_average
----> 500라인